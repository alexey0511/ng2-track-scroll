{"version":3,"file":"track-scroll.directive.js","sourceRoot":"","sources":["../../src/track-scroll/track-scroll.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by Jose Andres on 02.16.17\n */\n\nimport * as _ from 'lodash';\nimport { Directive, OnInit, Input, Output, HostListener, EventEmitter, ElementRef } from '@angular/core';\nimport { TrackScrollConfig, TrackScrollConfigModel } from './track-scroll.config';\n\n@Directive({\n    selector: '[trackScroll]'\n})\nexport class TrackScrollDirective implements OnInit {\n    @Input() trackScrollConfig: TrackScrollConfigModel = {};\n    @Output() trackScrollEnter = new EventEmitter<boolean>();\n    @Output() trackScrollLeave = new EventEmitter<boolean>();\n    private config: TrackScrollConfigModel;\n    private prestatus: string = '';\n    private status: string = 'outside';\n\n    constructor(private element: ElementRef) {\n        //\n    }\n\n    @HostListener('document:scroll', ['$event'])\n    public track(event: Event) {\n        if (!_.isUndefined(this.config) && !_.isEmpty(this.config)) {\n            let offsetTop = this.getCoords(this.element.nativeElement).top;\n            let offsetHeight = this.element.nativeElement.offsetHeight;\n            let offsetBottom = offsetTop + offsetHeight;\n            let scrollY: number = undefined;\n\n            switch (this.config.position) {\n                case 'middle': // Half the screen\n                    scrollY = this.addOffset((window.innerHeight / 2) + (window.scrollY || window.pageYOffset));\n                    break;\n\n                case 'top': // Top of the screen\n                    scrollY = this.addOffset(window.scrollY || window.pageYOffset);\n                    break;\n\n                case 'bottom': // Bottom of the screen\n                    scrollY = this.addOffset(window.innerHeight + (window.scrollY || window.pageYOffset));\n                    break;\n\n                default: break;\n            }\n\n            // Save status\n            this.prestatus = this.status;\n\n            if (!_.isUndefined(scrollY)) {\n\n                // If scrollY is between the element's height\n                if (offsetTop <= scrollY && scrollY < offsetBottom) {\n                    if (this.status === 'outside') {\n                        this.status = 'inside';\n\n                        // Emit enter event\n                        this.trackScrollEnter.emit(true);\n                    }\n                }\n                else {\n                    this.status = 'outside';\n                }\n            }\n\n            // Emit leave event if the status changed\n            if (this.status !== this.prestatus && this.status === 'outside') {\n                this.trackScrollLeave.emit(true);\n            }\n        }\n    }\n\n    /**\n     * Add offset to the already calculated scrollY\n     *\n     * @input scrollY: number\n     * @return number\n     */\n    private addOffset(scrollY: number): number {\n        if (this.config.offset > 0) {\n            if (this.config.position === 'top') {\n                return scrollY + this.config.offset; // add offset\n            }\n            else if (this.config.position === 'bottom') {\n                return scrollY - this.config.offset; // minus offset\n            }\n            else if (this.config.position === 'middle') {\n                switch (this.config.offsetPosition) {\n                    case 'top':\n                        return scrollY - this.config.offset;\n                    case 'bottom':\n                        return scrollY + this.config.offset;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        return scrollY;\n    }\n\n    /**\n     * Get the real element coordinates\n     *\n     * Thanks to @basil\n     * See: http://stackoverflow.com/questions/5598743/finding-elements-position-relative-to-the-document\n     *\n     * @Input el: HTMLElement\n     * @return { top: number, left: number }\n     */\n    getCoords(el: HTMLElement): { top: number, left: number} {\n        let box = el.getBoundingClientRect();\n\n        let body = document.body;\n        let docEl = document.documentElement;\n\n        let scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n        let scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\n\n        let clientTop = docEl.clientTop || body.clientTop || 0;\n        let clientLeft = docEl.clientLeft || body.clientLeft || 0;\n\n        let top  = box.top +  scrollTop - clientTop;\n        let left = box.left + scrollLeft - clientLeft;\n\n        return {\n            top: Math.round(top),\n            left: Math.round(left)\n        };\n    }\n\n    public ngOnInit() {\n        this.config = _.defaults(this.trackScrollConfig, new TrackScrollConfig());\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}